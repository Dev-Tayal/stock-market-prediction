# -*- coding: utf-8 -*-
"""Welcome to Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Dev-Tayal/stock-market-prediction/blob/main/notebooks/01_lstm_stock_prediction.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install yfinance quandl

import yfinance as yf
import quandl
import pandas as pd

# Download stock data
ticker = 'AAPL'
df_stock = yf.download(ticker, start='2010-01-01', end='2025-07-10')
df_stock
#df_stock.tail()

import numpy as np
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt

# Use only the 'Close' column
data = df_stock[['Close']].values

# Normalize the data to scale values between 0 and 1
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# Create sequences of 60 days (X) and 1-day-ahead prediction (y)
def create_sequences(data, look_back=60):
    X, y = [], []
    for i in range(look_back, len(data)):
        X.append(data[i - look_back:i, 0])  # 60 values
        y.append(data[i, 0])                # target value
    return np.array(X), np.array(y)

X, y = create_sequences(scaled_data)

# Reshape X for LSTM (samples, time steps, features)
X = X.reshape((X.shape[0], X.shape[1], 1))

# Train/test split (80% train, 20% test)
split = int(len(X) * 0.8)
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

print(f"Training samples: {X_train.shape[0]}")
print(f"Testing samples: {X_test.shape[0]}")

# Commented out IPython magic to ensure Python compatibility.
# %pip install tensorflow

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# Build the LSTM model
model = Sequential()

# First LSTM layer with Dropout
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(Dropout(0.2))

# Second LSTM layer with Dropout
model.add(LSTM(units=50, return_sequences=False))
model.add(Dropout(0.2))

# Output layer (1 neuron for predicting the stock price)
model.add(Dense(units=1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test))

import matplotlib.pyplot as plt

plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.title("Model Training Loss Over Epochs")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.legend()
plt.show()

#Prediction
predicted_scaled = model.predict(X_test)

predicted_scaled = predicted_scaled.reshape(-1, 1)
y_test = y_test.reshape(-1, 1)


#Reverse scaling to get actual prices
predicted_prices = scaler.inverse_transform(predicted_scaled)
actual_prices = scaler.inverse_transform(y_test)

test_dates = df_stock.index[-len(y_test):]

plt.figure(figsize=(12,6))
plt.plot(test_dates, actual_prices, label='Actual Price')
plt.plot(test_dates, predicted_prices, label='Predicted Price')
plt.title("Stock Price Prediction vs Actual")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.show()

from sklearn.metrics import mean_squared_error
import numpy as np

rmse = np.sqrt(mean_squared_error(actual_prices, predicted_prices))
print(f"Fixed RMSE: {rmse:.2f}")